#!/usr/bin/env python3

import os, sys

import pulsectl, pulsectl.lookup as pal

def parse_bool(val, _states={
		'1': True, 'yes': True, 'true': True, 'on': True,
		'0': False, 'no': False, 'false': False, 'off': False }):
	try: return _states[val.lower()]
	except KeyError: raise ValueError(val)

def parse_tweak(val):
	return val.split('=', 1) if '=' in val else (val, None)

def main(args=None):
	import argparse, textwrap, re
	dd = lambda text: re.sub( r' \t+', ' ',
		textwrap.dedent(text).strip('\n') + '\n' ).replace('\t', '  ')

	parser = argparse.ArgumentParser(
		formatter_class=argparse.RawTextHelpFormatter,
		description='Non-interactive command-line tool to tweak pulseaudio objects.')
	parser.add_argument('actions', nargs='*', help=dd('''
		List of key=value tweaks or actions to apply to any matched objects.
		Supported tweaks/actions: vol, props, vol-set, vol-change, mute.
		Examples: vol-set=0.13, vol, props, mute=1, mute, vol-change=-0.1'''))
	parser.add_argument('-m', '--match', action='append', metavar='match-expr', help=dd('''
		Match pulse objects to affect using provided expression(s).
		Can be specified multiple times, to affect any/all matched objects.
		Use "?" with this option to get more info on expression syntax.
		Examples: -m application.process.binary:mpv, -m vlc, -m sink:device.bus:pci'''))
	parser.add_argument('-1', '--match-first', action='store_true', help=dd('''
		When processing -m/--match opts in order, if any match returns
			any pulse objects, use only those, ignoring any other matches.
		This can be used to specify a list of "fallback" match-expressions.'''))
	parser.add_argument('-n', '--dry-run', action='store_true',
		help='Only print matched objects and all tweaks without applying anything.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	if not opts.match: parser.error('At least one -m/--match spec is required')
	if any(m.strip() == '?' for m in opts.match): help(pal.pulse_obj_lookup); return

	with pulsectl.Pulse('pulsectl-cli-tool') as pulse:
		obj_set = set()
		for m in opts.match:
			objs = pal.pulse_obj_lookup(pulse, m)
			obj_set.update(objs)
			if opts.match_first and objs: break
		tweaks = dict(parse_tweak(t) for t in opts.actions)

		for obj in obj_set:
			if opts.dry_run: print(f'Object: {obj!r}')
			for k, v in tweaks.items():
				if opts.dry_run: print(f'  tweak: {k} = {v}'); continue
				if k == 'vol': print(f'{obj!r} volume = {pulse.volume_get_all_chans(obj):.4f}')
				elif k == 'props':
					print(f'{obj!r} proplist:')
					for k, v in obj.proplist.items(): print(f'  {k} = {v}')
				elif k == 'vol-set': pulse.volume_set_all_chans(obj, float(v))
				elif k == 'vol-change': pulse.volume_change_all_chans(obj, float(v))
				elif k == 'mute':
					v = (not obj.mute) if v is None else parse_bool(v)
					pulse.mute(obj, v)

if __name__ == '__main__': sys.exit(main())
